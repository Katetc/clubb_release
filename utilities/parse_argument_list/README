The main goal of these scripts was to parse out large sections of clubb in order to preform large argument list and code changes automatically. Certain scripts lack documentation and the code is fragile (not easy to maintain), however, there are sections of this code that can be used as a template if we need to parse out sections of clubb again. Additionally, it is important to note that some sections of these scripts may not work as intended.

One method of parsing can be found in the gr_replacer.py script, and another method of parsing, which is overall better in my opinion, can be found in the stats_placer.py script. In order to execute them, simply set the path of the files you want changed to a 'testing' clubb_core directory and it will make the needed changes. Afterwards A couple of issues that were resolved as a result of these scripts are ticket larson-group/clubb#733 for replacing stats variables and ticket larson-group/clubb#886 for replacing the gr variable throughout all of clubb along with the host models.

Scripts and their description:

indent_enforcer.py: This script was used to help maintain the coding standard throughout clubb by placing the correct amount of whitespace where needed in subroutines. Ex. changing a section of code that has 2 whitespace characters to 4 if needed. In order to execute it, simply go into the file, change the path variable to the required path where all the clubb files are at and type './indent_enforcer.py' or run it from a python ide such as canopy. This script can also be used before the other two scripts in order to make them more accurate when locating and replacing variables, or it can be used as a standalone in order to just tidy up some of the code base.

gr_replacer.py: This script was meant to locate and replace all instances of 'use grid_class, only: gr' with having gr be passed down through the argument list of the needed subroutines and files. In order to execute it, simply go into the file, change the path variable to the required path where all the clubb files are at and type './gr_replacer.py' or run it from a python ide such as canopy.

stats_script.py: This script will look for all instances where stats variables are being used and make a list of the ones in use. It will also note the subroutine in which those variables are needed. The output of this script is a file which lists all subroutines that use stats variables along with which variables are being used by that subroutine. In order to execute it, simply go into the file, change the path variable to the required path where all the clubb files are at and type './stats_script' or run it from a python ide such as canopy.

stats_placer.py: This script is the script that actually replaces the stats variables with the stats type in the needed subroutines. The input to this file is the output which was generated by stats_script.py. In order to execute it, first run stats_script.py; then, simply go into the file, change the path variable to the required path where all the clubb files are at along with the path where you have stored the file generated by stats_script.py and type './stats_placer.py' or run it from a python ide such as canopy.
