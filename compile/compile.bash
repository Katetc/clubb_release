#!/bin/bash
# $Id$
# ------------------------------------------------------------------------------
#
# Compilation script for CLUBB using mkmf. It generates:
#  - libraries: libclubb_bugsrad.a, libclubb_param.a, libclubb_coamps.a
#  - executables: clubb_standalone clubb_tuner clubb_thread_test jacobian G_unit_tests int2txt
#
# Sub-makefiles for each target are automatically generated using the
# 'mkmf' utility. Dependencies among source files are sorted out by 'mkmf'.
# A master makefile is generated that invokes all sub-makefiles.
#
# Platform specific settings are included through a configuration
# file located under config/
#
# This script also depends on external files containing a list of source
# files to be included in each target, which we need to maintain manually.
# A non-exhaustive list of these files follows.
# - file_list/bugsrad_files : files needed for libclubb_bugsrad.a
# - file_list/model_files : files needed for clubb_standalone, clubb_tuner,
#              clubb_thread_test, jacobian, and G_unit_tests
# - file_list/clubb_standalone_files : files needed for clubb_standalone
# - file_list/clubb_thread_test_files : files needed for clubb_thread_test
# - file_list/clubb_tuner_files : files needed for clubb_tuner
# - file_list/jacobian_files : files needed for jacobian
# - file_list/G_unit_tests_files : files needed for G_unit_tests
# - file_list/int2txt_files : files needed for int2txt
#
# Some files are automatically generated by the script based on
# the directories in src and placed in the subdirectory generated_lists. This
# list may or may not be complete:
#
# - generated_lists/param_files : files needed for libclubb_param.a
# - generated_lists/coamps_files : files needed for libclubb_coamps.a
# - generated_lists/numerical_recipes_files : Numerical Recipes files for clubb_tuner
# - generated_lists/clubb_optional_files: Code in the UNRELEASED_CODE blocks of clubb
# - generated_lists/silhs_files: Code in the SILHS blocks of clubb
# - generated_lists/clubb_gfdl_activation_files : files needed for libclubb_gfdlact.a
#
# These file lists can be empty if those directories are empty due to licensing
# restrictions or similar issues.
# ------------------------------------------------------------------------------

# Flag to allow for promotion of reals to double precision at compile time
# This will exclude the Numerical Recipes files, so only the Siarry, et al.
# ESA algorithm will be usable for tuning runs.  Set to true to use double precision 
# everywhere that it is not explicitly specified. (Note: This should not be the case
# anywhere inside of code written by the CLUBB group; we use a generalized
# precision, core_rknd, which this flag does not affect).
l_double_precision=false

# Figure out the directory where the script is located
scriptPath=`dirname $0`

# Store the current directory location so it can be restored
restoreDir=`pwd`

# Change directories to the one the script is located in
cd $scriptPath

if [ -z $1 ]; then
	# Set using the default config flags

	CONFIG=./config/linux_x86_64_gfortran.bash # Linux (Redhat Enterprise 5 / GNU)
#	CONFIG=./config/linux_x86_64_g95_optimize.bash # Linux (Redhat Enterprise 5 g95)
#	CONFIG=./config/macosx_x86_64_gfortran.bash # MacOS X / GNU
#	CONFIG=./config/aix_powerpc_xlf90_bluefire.bash # IBM AIX on Bluefire / XL Fortran
#	CONFIG=./config/solaris_generic_oracle.bash # Oracle/Sun Solaris / Oracle/Sun Fortran

else
	# Set config based on the first argument given to compile.bash

	CONFIG=$1
fi

# Load desired configuration file
if [ -e $CONFIG ]; then
	source $CONFIG
else
	echo "Cannot find " $CONFIG
	exit -1
fi

# ------------------------------------------------------------------------------
# Required libraries + platform specific libraries from LDFLAGS
REQ_LIBS="-lclubb_mg -lclubb_bugsrad -lclubb_KK_microphys -lclubb_parabolic -lclubb_morrison -lmicrophys_utils -lclubb_param"

OPT_LIBS="-lclubb_other"
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# Generate makefiles using 'mkmf'


if [ -e $srcdir/SILHS ]; then
	CLUBBStandardsCheck_silhs="-perl ../utilities/CLUBBStandardsCheck.pl ../src/SILHS/*.F90"
fi

# ------------------------------------------------------------------------------
# Generate master makefile
# CLUBB generates libraries.  The dependencies between such libraries must
# be handled manually.

cd $bindir
cat > Makefile << EOF
# Master makefile for CLUBB generated by 'compile.bash'
# Edit 'compile.bash' to customize.

all:	libclubb_param.a libclubb_bugsrad.a clubb_standalone clubb_tuner \
	jacobian G_unit_tests int2txt clubb_thread_test
	perl ../utilities/CLUBBStandardsCheck.pl ../src/*.F90
	perl ../utilities/CLUBBStandardsCheck.pl ../src/CLUBB_core/*.F90
	perl ../utilities/CLUBBStandardsCheck.pl ../src/Benchmark_cases/*.F90
	$CLUBBStandardsCheck_unreleased_cases
	perl ../utilities/CLUBBStandardsCheck.pl ../src/KK_microphys/*.F90
	$CLUBBStandardsCheck_silhs
	perl ../utilities/CLUBBStandardsCheck.pl ../src/G_unit_test_types/*.F90

libclubb_param.a:
	cd $objdir; \$(MAKE) -f Make.clubb_param

libclubb_bugsrad.a: libclubb_param.a
	cd $objdir; \$(MAKE) -f Make.clubb_bugsrad

libmicrophys_utils.a: libclubb_param.a
	cd $objdir; \$(MAKE) -f Make.microphys_utils

libclubb_parabolic.a: libclubb_param.a
	cd $objdir; \$(MAKE) -f Make.clubb_parabolic

libclubb_KK_microphys.a: libclubb_param.a libmicrophys_utils.a libclubb_parabolic.a
	cd $objdir; \$(MAKE) -f Make.clubb_KK_microphys

libclubb_coamps.a: libclubb_param.a
	cd $objdir; \$(MAKE) -f Make.clubb_coamps

libclubb_morrison.a: libclubb_param.a libmicrophys_utils.a
	cd $objdir; \$(MAKE) -f Make.clubb_morrison
	
libclubb_mg.a: libclubb_param.a libclubb_KK_microphys.a
	cd $objdir; \$(MAKE) -f Make.clubb_mg

libclubb_gfdlact.a: 
	cd $objdir; \$(MAKE) -f Make.clubb_gfdlact

libsilhs.a: libclubb_param.a libclubb_KK_microphys.a libmicrophys_utils.a
	cd $objdir; \$(MAKE) -f Make.silhs

libclubb_other.a: libclubb_param.a libclubb_bugsrad.a libclubb_KK_microphys.a libclubb_coamps.a libclubb_morrison.a libclubb_mg.a libclubb_gfdlact.a libsilhs.a
	cd $objdir; \$(MAKE) -f Make.clubb_other

clubb_standalone: libclubb_bugsrad.a libclubb_param.a libclubb_KK_microphys.a $COAMPS_LIB libclubb_morrison.a libclubb_mg.a libclubb_other.a $GFDLACT_LIB $lh_LIB
	cd $objdir; \$(MAKE) -f Make.clubb_standalone

clubb_thread_test: libclubb_bugsrad.a libclubb_param.a libclubb_KK_microphys.a $COAMPS_LIB libclubb_morrison.a libclubb_mg.a libclubb_other.a $GFDLACT_LIB $lh_LIB
	cd $objdir; \$(MAKE) -f Make.clubb_thread_test

clubb_tuner: libclubb_bugsrad.a libclubb_param.a libclubb_KK_microphys.a $COAMPS_LIB libclubb_morrison.a libclubb_mg.a libclubb_other.a $GFDLACT_LIB $lh_LIB
	cd $objdir; \$(MAKE) -f Make.clubb_tuner

jacobian: libclubb_bugsrad.a libclubb_param.a libclubb_KK_microphys.a $COAMPS_LIB libclubb_morrison.a libclubb_mg.a libclubb_other.a $GFDLACT_LIB $lh_LIB
	cd $objdir; \$(MAKE) -f Make.jacobian

G_unit_tests: libclubb_bugsrad.a libclubb_param.a libclubb_KK_microphys.a $COAMPS_LIB libclubb_morrison.a libclubb_mg.a libclubb_other.a $GFDLACT_LIB $lh_LIB
	cd $objdir; \$(MAKE) -f Make.G_unit_tests

int2txt: libclubb_bugsrad.a libclubb_param.a libclubb_KK_microphys.a $COAMPS_LIB libclubb_morrison.a libclubb_mg.a libclubb_other.a
	cd $objdir; \$(MAKE) -f Make.int2txt

clean:
	-rm -f $objdir/*.o \
	$objdir/*.mod
	
distclean:
	-rm -f $objdir/*.* \
	$objdir/.cppdefs \
	$libdir/lib* \
	$bindir/clubb_standalone \
	$bindir/clubb_tuner \
	$bindir/clubb_thread_test \
	$bindir/int2txt \
	$bindir/jacobian \
	$bindir/G_unit_tests \
	$bindir/mkmf_template \
	$bindir/Makefile \

EOF
cd $dir

# ------------------------------------------------------------------------------
# Invoke master makefile

cd $bindir
$gmake
# Get the exit status of the gmake command
exit_status=${?}

# Remove unnecessary compiler artifacts
rm -rf "$generated_lists_dir"

cd $restoreDir

# Exit returing the result of the make
exit $exit_status
