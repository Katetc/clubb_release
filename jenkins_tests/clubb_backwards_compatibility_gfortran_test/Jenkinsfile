pipeline {
  agent any
  stages {
    stage('Remove Idiot Proofing') {
      steps {
	sh ''' sed -i -e '/if ( ( l_min_xp2_from_corr_wx ) &/,/endif/d' src/CLUBB_core/advance_clubb_core_module.F90'''
      }
    }
    stage('Compile') {
      steps {
        sh 'compile/compile.bash '
      }
    }
    stage('Configure Clubb') {
      steps {
        sh '''bash -c "cp input/tunable_parameters_compatible_r8029/* input/tunable_parameters"'''
      }
    }
    stage('Run Clubb') {
      steps {
        sh '''bash -c "echo bomex > run_scripts/RUN_CASES"
              bash -c "echo dycoms2_rf01 >> run_scripts/RUN_CASES"
              run_scripts/run_scm_all.bash'''
      }
    }
    stage('Check output against tolerance') {
      steps {
        sh '''echo "Testing bomex" 
              bash -l -c "postprocessing/tolerance_compare/tolerance_check.py /home/jenkins/tolerance_test_benchmarks/clubb_r8029/bomex_sfc.nc output/bomex_sfc.nc lwp 0.01"
              echo "Testing dycoms2_rf01"
              bash -l -c "postprocessing/tolerance_compare/tolerance_check.py /home/jenkins/tolerance_test_benchmarks/clubb_r8029/dycoms2_rf01_sfc.nc output/dycoms2_rf01_sfc.nc lwp 0.01"'''
      }
    }
  }
  post {
    always {
      script {
      if ( "${env.JOB_NAME}" == "clubb_backwards_compatibility_gfortran_test" )
      	cleanWs(cleanWhenSuccess: true, cleanWhenFailure: true)
      }
    }
    failure {
      script {
      if ( "${env.JOB_NAME}" ==	"clubb_backwards_compatibility_gfortran_test" )
      	emailext(to: 'messnermet@uwm.edu', subject: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has Failed", attachLog: true, body: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has failed. See the attached build log and the build results (${env.BUILD_URL}) for help troubleshooting.")
      }
    }
  }
}
