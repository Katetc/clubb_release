pipeline {
  agent any
  stages {
    stage('Run test_fatal_error_handling') {
      steps {
        // This dir{} block is used to run the enclosed commands in a specific directory, in this case run_scripts
        dir('run_scripts') {
          sh '''source /etc/profile.d/larson-group.sh
                module load gcc netcdf-fortran
                ./test_fatal_error_handling.bash'''
        }
      }
    }
    // The next 2 stages check to make sure the test produced the expected output errors
    stage('Check for wp2 NaN error from advance_wp2_wp3') {
      steps {
        sh '''grep 'Error calling advance_wp2_wp3' run_scripts/advance_wp2_wp3_bad_wp2'''
      }
    }
    stage('Check for wp2 NaN error from advance_wm_wpxp') {
      steps {
        sh '''grep 'Error calling advance_xm_wpxp' run_scripts/advance_xm_wpxp_bad_wp2'''
      }
    }
  }
  post {
    always {
      // Certain logical functions like IF statements or TRY-CATCH blocks can only operate while in a script{} block
      script {
      // This cleans out the test workspace so the next run has a fresh start
      // However this only occurs when the test is named clubb_error_handling_gfortran_test
      // This is to prevent the branch and copy tests from deleting thier workspaces so they are available for debugging
      if ( "${env.JOB_NAME}" == "clubb_error_handling_gfortran_test" )
      	cleanWs(cleanWhenSuccess: true, cleanWhenFailure: true)
      }
    }
    failure {
      script {
      if ( "${env.JOB_NAME}" ==	"clubb_error_handling_gfortran_test" )
        // This command handles the email on failure feature of the jenkins test. This line is the same on every jenkins test.
      	emailext(to: 'messnermet@uwm.edu', subject: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has Failed", attachLog: true, body: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has failed. See the attached build log and the build results (${env.BUILD_URL}) for help troubleshooting.")
      }
    }
  }
}
