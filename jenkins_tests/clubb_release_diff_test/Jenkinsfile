pipeline {
  agent any
  stages {
    stage('Checkout Clubb and Clubb_Release') {
      steps {
        // This clones both the standard clubb repo and the clubb release repo into the already present workspace code
        // This is because of how the diff works
        sh '''git clone https://github.com/larson-group/clubb.git
              git clone https://github.com/larson-group/clubb_release.git'''
      }
    }
    stage('Diff') {
      steps {
        // We diff the 2 repos and exclude a select couple of files using lists stored in version_clubb_core.txt and version_sihls.txt
        sh 'diff --exclude=.git --exclude=version_clubb_core.txt --exclude=version_silhs.txt -r clubb clubb_release'
      }
    }
  }
  post {
    always {
      // Certain logical functions like IF statements or TRY-CATCH blocks can only operate while in a script{} block
      script {
      // This cleans out the test workspace so the next run has a fresh start
      // However this only occurs when the test is named clubb_release_diff_test
      // This is to prevent the branch and copy tests from deleting thier workspaces so they are available for debugging
      if ( "${env.JOB_NAME}" == "clubb_release_diff_test" )
      	cleanWs(cleanWhenFailure: true, cleanWhenSuccess: true, cleanWhenUnstable: true)
      }
    }
    failure {
      script {
      if ( "${env.JOB_NAME}" == "clubb_release_diff_test" )
        // This command handles the email on failure feature of the jenkins test. This line is the same on every jenkins test.
      	emailext(to: 'messnermet@uwm.edu', subject: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has Failed", attachLog: true, body: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has failed. See the attached build log and the build results (${env.BUILD_URL}) for help troubleshooting.")
      }
    }
  }
}
