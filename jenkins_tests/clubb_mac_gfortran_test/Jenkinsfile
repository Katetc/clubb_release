pipeline {
  agent {
    node {
      // This is the only test that uses the Mac node
      // By changing the node modifier we are able to force the test to run on the Mac 
      label 'Mac'
    }
  }
  stages {
    stage('Compile') {
      steps {
        sh '''compile/compile.bash -c config/macosx_x86_64_gfortran.bash'''
      }
    }
    stage('Run Clubb') {
      steps {
        sh 'run_scripts/run_scm_all.bash --min-cases'
      }
    }
  }
  post {
    always {
      // Certain logical functions like IF statements or TRY-CATCH blocks can only operate while in a script{} block
      script {
       // This checks if the current test matches the name of the official test
       // We do this to prevent the branch tests and the clubb copy tests from removing its output
       // so they can be referenced later for debugging
       if ( "${env.JOB_NAME}" == "clubb_mac_gfortran_test" )
       	cleanWs(cleanWhenFailure: true, cleanWhenSuccess: true, cleanWhenUnstable: true)
      }
    }
    failure {
      script {
       if ( "${env.JOB_NAME}" == "clubb_mac_gfortran_test" )
        // This command handles the email on failure feature of the jenkins test. This line is the same on every jenkins test.
       	emailext(to: 'messnermet@uwm.edu', subject: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has Failed", attachLog: true, body: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has failed. See the attached build log and the build results (${env.BUILD_URL}) for help troubleshooting.")
      }
    }
  }
}
