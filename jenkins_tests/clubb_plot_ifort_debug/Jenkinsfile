pipeline {
  
  agent any
  
  environment {
    commit      = "${GIT_COMMIT.substring(0, 7)}"
    branch_name = "${GIT_BRANCH.split('/').last()}"
  }

  stages {
    stage('Compile') {
      steps {
        // The source step is done to bring in all the needed intel path variables to run the rest of the commands
        sh '''source /etc/profile.d/larson-group.sh
              module load intel netcdf-fortran
		          compile/compile.bash -c config/linux_x86_64_ifort_debug.bash'''
      }
    }
    stage('Run') {
      steps {
        // The source step is done to bring in all the needed intel path variables to run the rest of the commands
        sh '''source /etc/profile.d/larson-group.sh
              module load intel netcdf-fortran
              run_scripts/run_scm_all.bash
              mv output cpu_${commit}; mkdir output'''
      }
    }
    stage('Plot') {
      steps {
        sh 'scp -r carson:/home/pub/web_plots/clubb_ifort_plots/master/cur_out .'
        sh 'python postprocessing/pyplotgen/pyplotgen.py -l -c cpu_* cur_out/cpu_* -o ${commit}_vs_master_$(cat cur_out/commit)'
        sh "ssh carson 'mkdir -p /home/pub/web_plots/clubb_ifort_plots/${branch_name}'"
        sh "scp -r *_vs_* carson:/home/pub/web_plots/clubb_ifort_plots/${branch_name}"
        sh "ssh carson '/home/pub/web_plots/generate_plot_directory_page.py /home/pub/web_plots/clubb_ifort_plots/'"
      }
    }
    stage('Update Master Output') {
      when {
        branch 'master'
      }
      steps {
        sh 'rm -rf cur_out'
        sh 'mkdir cur_out'
        sh 'mv cpu_* cur_out'
        sh 'echo ${commit} > cur_out/commit'
        sh "ssh carson 'rm -rf /home/pub/web_plots/clubb_ifort_plots/master/cur_out'"
        sh 'scp -r cur_out carson:/home/pub/web_plots/clubb_ifort_plots/master/'
      }
    }
  }
  post { 
    failure {
      script {
      if ( "${env.JOB_NAME}" == "clubb_ifort_debug_plot" )
        // This command handles the email on failure feature of the jenkins test. This line is the same on every jenkins test.
	emailext(to: 'messnermet@uwm.edu', subject: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has Failed", attachLog: true, body: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has failed. See the attached build log and the build results (${env.BUILD_URL}) for help troubleshooting.")
      }
    }
  }
}
