# --------------------------------------------------
# This file defines the plot for thlm data from clubb
#
# Author: Nicolas Strike, March 2019
#
# ##################################################
# #### Important notes on writing these files: #####
# This file follows the configparser ini standard
#   defined here: https://docs.python.org/3/library/configparser.html
#   but also contains a custom element that allows for
#   arrays to be defined in a comma seperated list
#   (whitespace around commas is ignored). Lists CAN
#   be written over multiple lines as long as the
#   those lines are in accordance with the configparser
#   multiline standard. A variable name must be enabled
#   in the python code to be interpreted as a list.
#
#  ConfigParser format cheatsheet:
#   Use #'s for whole line comments, in line comments are not allowed
#   file format is as follows:
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
#   [whatever-section-name-you-want]
#   some_variable_name_you_define = Some text or numbers
#   some_list_you_want = a, list, of, comma, seperated, values
#
#   [another section name]
#   yet_another_variable = 3.14159265358979323846264338327950288419716939937510
#   another_list = yes, I, wrote, pi, from, memory
#   is_there_a_limit_to_the_number_of_section_variables = no
#   heres_a_multiline_variable = This raw text is a valid
#       multiline entry because it contains an indentation on line 2
# -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --

[defaults]

# This is the name of the parent panel type. File location is relative to the parent directory
#     E.g. for a file in ../file.ini, simply file.ini works. This is because templates should be
#     defined in the root of the cases folder.
panel-type_file = PanelType_Profile.ini

# These values are regular text
title = Liquid Water Potential Temperature, Theta 1
y_label = Height [m]
x_label = thlm [K]

# These values are comma seperated lists. It is possible to have a list of 1 item.
model_vars = THETAL, THETA, TABS, QI

# This is a (string) mathmatical expression representing how the model_vars are related
# Note that the variables in this eqn must have the same name/text as defined in model_vars
# This eqn supports any formats allowed by the python eval() method.
# If a model_vars only contains 1 variable, simply state the variable name here
vars_relationship = THETAL + 2500.4 * (THETA/TABS) * QI

# This list contains the factors used to help convert a variable from one model
#    to be compatible with another model. In many cases it's simply 1.0.
# This list must be in the same order as the model_vars list, and the last
# value is the conversion factor for vars_relationship.
# If there is only 1 variable in model_vars, this must still list 2 values: one
#    for the value in model_vars and one for vars_relationship.
conversion_factors = 1.0, 1.0, 1.0, 1.0, 1.0

# These are the model's variable names to plot along the given axis.
# To plot a variable relationship, use 'vars_relationship' instead and it will
#   plot the relationship defined above instead.
y_axis_data = z
x_axis_data = vars_relationship

# If a panel needs to have it's graph/plot restricted to specific x,y values
#   then define them here. Otherwise use -1 for auto scaling/plotting all data.
# Many cases should only plot certain timesteps, define those here.
# Note: if x is restricted, then there is no need to find the corresponding y
#      values and restrict that as well, auto will fit the graph accordingly.
y_min = -1
y_max = -1
x_min = 281
x_max = 310