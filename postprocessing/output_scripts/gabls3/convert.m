classdef convert
    %CONVERT Converts data generated by CLUBB to the form required for
    %output.
    %
    %   As the number and variety of conversion methods increases over time
    %   this class may have to be split up into several classes.
    %
    
    
    % These are constants that may be used by any function.
    properties(Constant)
        g0 = 9.8;
        p0 = 1e5;
        R  = 287.04;
        Cp = 1004.67;
        Lv = 2.5e6;
    end
    
    methods(Static)
        
        function time_height = create_time_height_series( height, sizet )
        % CREATE_TIME_HEIGHT_SERIES Copies the same height profile for the number of iterations specified by sizet.
        % Essentially this creates a 2D array
            col = reshape(height,max(size(height)),1);
            multiplier(1:sizet) = 1;
            time_height = col * multiplier;
            
        end
        
        function specific_humidity = total_water_mixing_ratio_to_specific_humidity ...
                ( total_water_mixing_ratio )
        % TOTAL_WATER_MIXING_RATIO_TO_SPECIFIC_HUMIDITY Converts total water mixing ratio to specific humidity.
        %
        %   Input(s)
        %       total_water_mixing_ratio Total Water Mixing Ratio [kg/kg]
        %
        %   Output(s)
        %       specific_humidity Specific Humdity [kg/kg]
        %
            specific_humidity = total_water_mixing_ratio ./ (1 + total_water_mixing_ratio);
            
        end
        
        function T_forcing = thlm_f_to_t_f(thlm_f, radht, exner)
        % THLM_F_TO_T_F Converts thlm_f to t_f using exner
        %
        %   Input(s)
        %       thlm_f Potential Temperature Forcing [K/s]
        %       exner Exner function                 [-]
        %
        %   Output(s)
        %       T_forcing Temperature forcing        [K/s]
        
            T_forcing = (thlm_f - radht) .* exner;
            
        end
        
        function vertical_movement_in_Pas = w_wind_in_ms_to_Pas( wm, rho)
        % W_WIND_IN_MS_TO_PAS Converts w_wind from m/s to Pa/s
        %
        %   Input(s)
        %       wm  w           [m/s]      
        %       rho Density     [kg/m^3]
        %
        %   Output(s)
        %       vertical_movement_in_Pas [Pa/s]
        %
            
            vertical_movement_in_Pas = -(wm .* convert.g0 .* rho);
            
        end
        
        function temperature = potential_temperature_to_temperature( potential_temperature, exner )
        % POTENTIAL_TEMPERATURE_TO_TEMPERATURE Converts potential
        % temperature to temperature using the exner function.
        %
        %   Input(s)
        %       potential_temperature Potential Temperatue [K]
        %       exner   Exner Function                     [-]
        %
        %   Output(s)
        %       temperature Temperature                    [K]
        %
            
            temperature = potential_temperature .* exner;
            
        end

	function in_kms = flux_in_w_m_sq_to_kms( in_w_m_sq, rho )
	%FLUX_IN_W_M_SQ_TO_KMS Converts flux in W/m^2 to Km/s
	%
	%   Input(s)
	%	in_w_m_sq	Flux of temperature	[W/m^2]
	%	rho		Density			[kg/m^3]
	%   Output(s)
	%	in_kms		Flux of temperature	[Km/s]
	%	

	    in_kms = in_w_m_sq ./ (rho * convert.Cp);

	end

	function in_kgkgms = flux_in_w_m_sq_to_kgkgms( in_w_m_sq, rho )
	%FLUX_IN_W_M_SQ_TO_KMS Converts flux in W/m^2 to Km/s
	%
	%   Input(s)
	%	in_w_m_sq	Flux of moisture	[W/m^2]
	%	rho		Density			[kg/m^3]
	%   Output(s)
	%	in_kgkgms	Flux of moisture	[(kg*kg)/s]
	%	

	    in_kgkgms = in_w_m_sq ./ (rho * convert.Lv);

       end
 
    end
    
end

