! $Id: sounding.F.extension.20080411,v 1.1 2008-04-11 18:26:09 faschinj Exp $
#define SCLR_THETA 1
#define SCLR_RT 2
        module sounding

        implicit none

        public :: 
     .  read_sounding,
     .  read_profile ! Not currently used in HOC

        private :: linint

        contains
!------------------------------------------------------------------------
        subroutine read_sounding( iunit, 
     .                            thlm, rtm, um, vm, ugm, vgm, runfile, 
     .                            runtype, 
     .                            sclrm, edsclrm ) ! optional

!       Description:
!       Subroutine to initialize model variables from a namelist file
!------------------------------------------------------------------------

        use grid_class
        use constants, only: sclr_dim, fstderr

        implicit none


        
        ! Constant parameter
        integer, parameter :: nmaxsnd = 600


        ! Input variables
        integer, intent(in) :: iunit ! File unit to use for namelist

        character(len=*), intent(in) :: 
     .  runfile,  ! Contains namelists
     .  runtype   ! String for DYCOMS II RF02

        ! Output variables
        real, intent(out), dimension(gr%nnzp) :: 
     .  thlm, ! Liquid potential temperature    [K]
     .  rtm,  ! Total water mixing ratio        [kg/kg]
     .  um,   ! u wind                          [m/s]
     .  vm,   ! v wind                          [m/s]
     .  ugm,  ! u geostrophic wind              [m/s]
     .  vgm   ! v geostrophic wind              [m/s]

        ! Optional output variables
        real, optional, intent(out), dimension(gr%nnzp, sclr_dim) :: 
     .  sclrm, edsclrm ! Passive scalar input   [units vary] 

        ! Local variables

        ! Input variables from namelist
        integer :: nlevels  ! Levels in the input sounding

        real, dimension(nmaxsnd) ::
     .  z,     ! Altitude                               [m]
     .  theta, ! Liquid potential temperature sounding  [K]
     .  rt,    ! Total water mixing ratio sounding      [kg/kg]
     .  u,     ! u wind sounding                        [m/s] 
     .  v,     ! v wind sounding                        [m/s]
     .  ug,    ! u geostrophic wind sounding            [m/s]
     .  vg     ! v geostrophic wind sounding            [m/s]

        real, dimension(nmaxsnd, sclr_dim) :: 
     .  sclr, edsclr ! Passive scalar input sounding    [units vary]

        ! Namelists
        namelist /sounding/ nlevels, z, theta, rt, u, v, ug, vg

        namelist /scalar_sounding/ sclr, edsclr

        integer :: i, j, k  ! Loop indices

        real, dimension(nmaxsnd) ::
     .  dummy
        ! Is this model being extended by 1976 Standard Atmosphere?
        logical :: stdatmo
        
        ! Whether this routine needs to read in data for the 
        ! passive scalars variables
        logical :: sclr_sounding 

        
        ! Read sounding namelist
        if ( present( sclrm ) .and. present( edsclrm ) ) then 
          sclr_sounding = .true.
        else
          sclr_sounding = .false.
        end if

        stdatmo = .false.
        
        open(unit = iunit, file = runfile, status = 'old')
        read(unit = iunit, nml = sounding)

        if ( sclr_sounding ) read(unit = iunit, nml = scalar_sounding)

        close(unit=iunit)

        if ( nlevels > nmaxsnd ) then
           write(fstderr,*) 'Error in sounding: nlevels > nmaxsnd'
           write(fstderr,*) 'nlevels = ',nlevels
           write(fstderr,*) 'nmaxsnd = ',nmaxsnd
           stop 'STOP in sounding'
        end if

        ! Error check: if lowest themodynamic grid height is lower than the
        ! lowest value from the input sounding, then the linear interpolation
        ! scheme will fail

        if ( gr%zt(2) < z(1) ) then
           write(fstderr,*) 'First level of input sounding must be',
     .     ' below first thermodynamic level'
           write(fstderr,*) ' first sounding level z(1) = ',z(1)
           write(fstderr,*) ' first thermodynamic level gr%zt(2) = ',
     .       gr%zt(2)
           stop 'STOP in sounding'
        end if

        ! First sounding level should be near ground value

        ! dschanen 1 May 2007
        ! We have changed this for Nov. 11 and June 25, both of which
        ! begin above the ground.
!       if ( abs(z(1)) > 1.e-8 ) then
        if ( .false. ) then
           write(fstderr,*) 'First level of input sounding must be z=0'
           stop 'STOP in sounding'
        else
          um(1)   = u(1)
          vm(1)   = v(1)
          ugm(1)  = ug(1)
          vgm(1)  = vg(1)
          thlm(1) = theta(1)
          rtm(1)  = rt(1)
          if ( sclr_sounding ) sclrm(1,:)   = sclr(1,:)
          if ( sclr_sounding ) edsclrm(1,:) = edsclr(1,:)
        end if

! Use linear interpolation from two nearest prescribed grid points
! (one above and one below) to initialize mean quantities in the model
! Modified 27 May 2005 -dschanen: eliminated the goto in favor of a do while( )

        print *, "Reading in sounding information"
        do i=2, gr%nnzp
          k=1
          do while ( z(k) < gr%zt(i) .and. .not. stdatmo )
            k=k+1
            if ( k > nlevels ) then
!              write(fstderr,*) 'STOP Not enough sounding data to ',
!     .          'initialize grid:'
!              write(fstderr,'(a,f7.1,/a,f7.1)') 
!     .          '  highest sounding level', z(nlevels),
!     .          '  should be higher than highest thermodynamic point',
!     .          gr%zt(gr%nnzp)
!              stop 'STOP in sounding'

               stdatmo = .true.
               exit
            end if  ! k > nlevels

            ! Regular situation w/ linear int.
            IF (      trim( runtype ) /= "dycoms2_rf02_do" 
     .          .AND. trim( runtype ) /= "dycoms2_rf02_ds" 
     .          .AND. trim( runtype ) /= "dycoms2_rf02_nd" 
     .          .AND. trim( runtype ) /= "dycoms2_rf02_so" ) THEN  

              um(i)   = linint( gr%zt(i), z(k), z(k-1), u(k), u(k-1) )
              vm(i)   = linint( gr%zt(i), z(k), z(k-1), v(k), v(k-1) )
              ugm(i)  = linint( gr%zt(i), z(k), z(k-1), ug(k), ug(k-1) )
              vgm(i)  = linint( gr%zt(i), z(k), z(k-1), vg(k), vg(k-1) )
              thlm(i) = linint( gr%zt(i), z(k), z(k-1), 
     .                      theta(k), theta(k-1) )
              rtm(i)  = linint( gr%zt(i), z(k), z(k-1), rt(k), rt(k-1) )
              
              !print *, "At k = ",k            
              !print *, "um(",i,")= ", um(i)
              !print *, "vm(",i,")= ", vm(i)
              !print *, "ugm(",i,")= ", ugm(i)
              !print *, "vgm(",i,")= ", vgm(i)
              !print *, "thlm(",i,")= ", thlm(i)
              !print *, "rtm(",i,")= ", rtm(i)

              if ( sclr_sounding ) then
                do j = 1, sclr_dim 
                  sclrm(i,j) = linint( gr%zt(i), z(k), z(k-1), 
     .                                 sclr(k,j), sclr(k-1,j) )
                  edsclrm(i,j) = linint( gr%zt(i), z(k), z(k-1), 
     .                                   edsclr(k,j), edsclr(k-1,j) )
                end do

              end if

            ELSE  ! DYCOMS II RF02 case

              IF ( gr%zt(i) < 795.0 ) THEN
                um(i)   =  3.0 + (4.3*gr%zt(i))/1000.0
                vm(i)   = -9.0 + (5.6*gr%zt(i))/1000.0
                ugm(i)  = um(i)
                vgm(i)  = vm(i)
                thlm(i) = 288.3
                rtm(i)  = (9.45)/1000.0
!               Scalars; change if not equal to th and rt
                if ( sclr_sounding ) then
                  sclrm(i, SCLR_THETA)   = thlm(i)
                  sclrm(i, SCLR_RT)      = rtm(i)
                  edsclrm(i, SCLR_THETA) = thlm(i)
                  edsclrm(i, SCLR_RT)    = rtm(i)
                end if
              ELSE
                um(i)   =  3.0 + (4.3*gr%zt(i))/1000.0
                vm(i)   = -9.0 + (5.6*gr%zt(i))/1000.0
                ugm(i)  = um(i)
                vgm(i)  = vm(i)
                thlm(i) = 295.0 + ( (gr%zt(i) - 795.0)**(1.0/3.0) )
                rtm(i)  = (  5.0 - 3.0 
     .          * ( 1.0 - EXP( (795.0 - gr%zt(i))/500.0 ) )  )/1000.0
                ! Same as above
                if ( sclr_sounding ) then
                  sclrm(i, SCLR_THETA)   = thlm(i)
                  sclrm(i, SCLR_RT)      = rtm(i)
                  edsclrm(i, SCLR_THETA) = thlm(i)
                  edsclrm(i, SCLR_RT)    = rtm(i)
                end if
              END IF

            END IF ! runtype

          end do ! do while ( z(k) < gr%zt(i) )

          if ( stdatmo ) then
                  call std_atmosphere(gr%zt(i), thlm(i),rtm(i))
                  print *, "gr%zt(",i,") = ",gr%zt(i)
                  print *, "thlm = ", thlm(i)
                  um(i) = um(i-1)
                  vm(i) = um(i-1)
                  ugm(i) = um(i)
                  vgm(i) = vm(i)
                  !rtm(i) = max(0., 2.*rtm(i-1)-rtm(i-2))
          endif

        end do   ! i=2, gr%nnzp
        
        if ( stdatmo ) then
                write(fstderr,*) "Warning: 1976 Standard Atmosphere ",
     .                              "was used to complete the grid"
        endif

        return
        end subroutine read_sounding

!------------------------------------------------------------------------
        real function linint( zmid, ztop, zbot, vtop, vbot )

!       Description:
!       Function to linearly interpolate quantities to a height zmid
!       given the values vtop at a height ztop and vbot at a height
!       zbot.
!------------------------------------------------------------------------

        implicit none

        ! Input  Variables

        real, intent(in) :: zmid, ztop, zbot, vtop, vbot

        ! Compute linear interpolation

        linint = ( (zmid-zbot)/(ztop-zbot) ) * (vtop-vbot) + vbot

        return
        end function linint

!------------------------------------------------------------------------
        subroutine read_profile( fname, x )

!       Description:
!       Subroutine to initialize one generic model variable from file
!------------------------------------------------------------------------

        use grid_class

        implicit none

        ! Constant Parameter

        integer, parameter :: nmaxsnd = 200

        ! Input Variables

        character*(*) fname

        ! Output

        real, dimension(gr%nnzp) :: x

        ! Local variables

        ! Input variables from namelist

        integer :: nlevels

        real, dimension(nmaxsnd) :: z, var

        namelist /profile/ nlevels, z, var

        ! Loop indices
        integer :: i,k

        ! Read sounding namelist

        open(10, file = trim(fname), status = 'old' )
        read(10, nml = profile )
        close(10)

        if ( nlevels > nmaxsnd ) then
           write(*,*) 'Error in sounding: nlevels > nmaxsnd'
           write(*,*) 'nlevels = ',nlevels
           write(*,*) 'nmaxsnd = ',nmaxsnd
           stop 'STOP in sounding'
        end if

! Error check: if lowest themodynamic grid height is lower than the
! lowest value from the input sounding, then the linear interpolation
! scheme will fail

        if ( gr%zt(2) < z(1) ) then
           write(*,*) 'First level of input sounding must be',
     .     ' below first thermodynamic level'
           write(*,*) ' first sounding level z(1) = ',z(1)
           write(*,*) ' first thermodynamic level gr%zt(2) = ',gr%zt(2)
           stop 'STOP in sounding'
        end if

! Use linear interpolation from two nearest prescribed grid points
! (one above and one below) to initialize mean quantities in the model
! Modified 27 May 2005 -dschanen: eliminated the goto in favor of a do while( )

        do i = 2, gr%nnzp
          k = 1
          do while ( z(k) < gr%zt(i) )
            k = k + 1
              if ( k > nlevels ) then
                write(*,*) 'STOP Not enough sounding data to ',
     .                     'initialize grid:'
                write(*,'(a,f7.1,/a,f7.1)') '  highest sounding level'
     .          ,z(nlevels)
     .          ,'  should be higher than highest thermodynamic point'
     .          ,gr%zt(gr%nnzp)

                write(*,*) ' filename: ',fname
                stop 'STOP in read_profile'
              end if
            x(i) = linint( gr%zt(i), z(k), z(k-1), var(k), var(k-1) )
          enddo ! while
        end do ! i=2, gr%nzzp

        return
        end subroutine read_profile

!-------------------------------------------------------------------------------------------
        subroutine std_atmosphere( alt, thlm,rtm )
        
        implicit none
        
        integer, parameter :: std_atmos_dim = 50
              
        real, parameter, dimension(std_atmos_dim) :: 
     .   std_alt = (/  
     .     1000.00,  2000.00,  3000.00,  4000.00,  5000.00,  
     .     6000.00,  7000.00,  8000.00,  9000.00,  10000.0,  
     .     11000.0,  12000.0,  13000.0,  14000.0,  15000.0,  
     .     16000.0,  17000.0,  18000.0,  19000.0,  20000.0,  
     .     21000.0,  22000.0,  23000.0,  24000.0,  25000.0,  
     .     26000.0,  27000.0,  28000.0,  29000.0,  30000.0,  
     .     31000.0,  32000.0,  33000.0,  34000.0,  35000.0,  
     .     36000.0,  37000.0,  38000.0,  39000.0,  40000.0,  
     .     41000.0,  42000.0,  43000.0,  44000.0,  45000.0,  
     .     46000.0,  47000.0,  48000.0,  49000.0,  50000.0   /)

        ! Temperature in degrees Kelvin
        real, parameter, dimension(std_atmos_dim) :: 
     .   std_tempk = (/  
     .     281.600,  275.100,  268.700,  262.200,  255.700,  
     .     249.200,  242.700,  236.200,  229.700,  223.200,  
     .     216.800,  216.600,  216.600,  216.600,  216.600,  
     .     216.600,  216.600,  216.600,  216.600,  216.600,  
     .     217.600,  218.600,  219.600,  220.600,  221.600,  
     .     222.580,  223.560,  224.540,  225.520,  226.500,  
     .     228.500,  230.500,  232.500,  234.500,  236.500,  
     .     239.280,  242.060,  244.840,  247.620,  250.400,  
     .     253.160,  255.920,  258.680,  261.440,  264.200,  
     .     265.480,  266.760,  268.040,  269.320,  270.600   /)
        
        real, parameter, dimension(std_atmos_dim) :: 
     .   std_sp_hmdty = (/ 
     . 0.378038E-02,  0.287984E-02,  0.197954E-02,  0.134261E-02,
     . 0.869093E-03,  0.575670E-03,  0.355932E-03,  0.228224E-03,  
     . 0.984800E-04,  0.435308E-04,  0.224781E-04,  0.118628E-04,  
     . 0.675169E-05,  0.368583E-05,  0.369610E-05,  0.366366E-05,  
     . 0.365425E-05,  0.361842E-05,  0.423077E-05,  0.494882E-05, 
     . 0.633914E-05,  0.806077E-05,  0.103636E-04,  0.129953E-04,  
     . 0.164671E-04,  0.173018E-04,  0.181366E-04,  0.189714E-04,  
     . 0.198062E-04,  0.206410E-04,  0.202939E-04,  0.199469E-04,  
     . 0.195999E-04,  0.192529E-04,  0.189058E-04,  0.184780E-04,  
     . 0.180502E-04,  0.176224E-04,  0.171946E-04,  0.167668E-04, 
     . 0.166688E-04,  0.165707E-04,  0.164727E-04,  0.163747E-04,  
     . 0.162767E-04,  0.153583E-04,  0.144398E-04,  0.135214E-04,  
     . 0.126030E-04,  0.116845E-04  /)



        

        real,intent(in) :: alt
        real,intent(out) :: thlm
        real, intent(out) :: rtm
        real :: temp

        integer :: varindex

        varindex = 0

        call binary_search( std_atmos_dim, std_alt, alt, varindex )

        if( varindex < 0 ) then 
           stop "Cannot find altitude in Standard Atmosphere"
        endif

        thlm = linint( alt, std_alt(varindex), std_alt(varindex-1), 
     .                 std_tempk(varindex), std_tempk(varindex-1) )

        temp = linint( alt, std_alt(varindex), std_alt(varindex-1),
     .                 std_sp_hmdty(varindex),
     .                 std_sp_hmdty(varindex-1))
        rtm = temp/(temp-1.)


        return
        end subroutine std_atmosphere
!-----------------------------------------------------------------------------------------------
        subroutine binary_search( n, array, var, i )

        implicit none

        integer, intent(in) :: n

        real, dimension(n), intent(in) :: array

        real, intent(in) :: var

        integer, intent(out) :: i

        logical :: found

        found = .false.
        
        i = n / 2
        do while( .not. found .and. i <= n .and. i >= 2 )
                if (var <= array(i) .and. var > array(i-1)) then
                   found = .true.
                   cycle
                else if (var < array(i)) then
                   i = i - 1
                else if (var > array(i))then
                   i = i + 1
                endif
        end do

        if ( .not. found ) i = -1
      
        end subroutine
        
        end module sounding
!-----------------------------------------------------------------------
